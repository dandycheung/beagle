<resources>

    <!-- Main -->
    <string name="open_debug_menu">Open debug menu</string>
    <string name="back">Back</string>

    <!-- Setup -->
    <string name="setup_title">Setup</string>
    <string name="setup_welcome_1"><b>Welcome!</b>\n\nBeagle is a free and open-source library that adds a smart and easily customizable debug menu to the internal builds of your Android apps.</string>
    <string name="setup_welcome_github_button">Check it out on GitHub</string>
    <string name="setup_welcome_2">In this demo application you can trigger the debug menu at any time by shaking the device (one decided shake is enough, think of your phone as a judge\'s gavel), or by tapping on the Beagle logo in the bottom-right corner.\n\nThe following sections provide some guidance with setting up the library while the rest of the app serves as a demo / showcase for the built-in feature set.\n</string>
    <string name="setup_initialization_1">Initialization</string>
    <string name="setup_initialization_2">The first step towards having Beagle in your project is making sure that the Maven Central repository is added to the <i>allprojects</i> block of your project-level <i>build.gradle</i> file.</string>
    <string name="setup_initialization_3">The library offers five variants that display the debug menu in different ways. The next step is selecting the one that fits your application\'s needs the most…</string>
    <string name="setup_variant_activity">Activity</string>
    <string name="setup_variant_bottom_sheet">Bottom sheet</string>
    <string name="setup_variant_dialog">Dialog</string>
    <string name="setup_variant_drawer">Drawer</string>
    <string name="setup_variant_view">View</string>
    <string name="setup_initialization_4">…and adding the following dependencies to the module-level <i>build.gradle</i> file:</string>
    <string name="setup_initialization_5">Specifying the <i>noop</i> variant for release builds ensures that none of Beagle\'s functionality makes its way to production, but you can still use the same public API without getting compilation errors.\n\nAfter adding the dependencies, the library can be initialized with a single line of code in the <i>onCreate()</i> method of your custom <i>Application</i> class:</string>
    <string name="setup_module_configuration_1">Module configuration</string>
    <string name="setup_initialization_6">At this point, if you run your app, you should be able to trigger an empty debug menu. To make it more useful, we should configure a list of modules.</string>
    <string name="setup_module_configuration_2">Beagle provides multiple ways to set or change the list of modules, the simplest of which is calling:</string>
    <string name="setup_module_configuration_3">This function can be called at any time, from any thread, to replace the current configuration with a new list of modules (provided as varargs).\n\nIn case you only want to change some parts of the debug menu without affecting the others, there are functions that give you more granular control over the modules.\n\nFor adding one or more modules you can use this:</string>
    <string name="setup_module_configuration_4">In this function, the optional <i>placement</i> parameter can be used to specify the position of the new modules (first, last, or above / below a module that\'s already part of the menu). Specifying the optional <i>lifecycleOwner</i> will automatically remove the modules when that lifecycle is over, which is ideal for elements that are specific to a single screen.\n\nThe following function exists for manually removing one or more modules from the debug menu, using their ID-s:</string>
    <string name="setup_module_configuration_5">As you can see, ID-s must be unique for modules: if two instances are added with the same ID, only one will be handled. Most modules automatically generate a unique ID for themselves that you only need to override in special cases, but some of them don\'t support this option as they were designed to be added only once. The ID-s for these types of modules are public constants in the module class: <i>ModuleName.ID</i>.\n\nLast but not least, the following function is exposed to get you the reference for an already added module instance:</string>
    <string name="setup_module_configuration_6">Check out the rest of this demo to see what you can achieve with the built-in modules. The <i>Examples</i> page contains a list of case studies showcasing various situations where Beagle can be useful (with code snippets to show how each specific debug menu is created), while the <i>Playground</i> page provides an interactive tool for previewing any possible combination of modules.</string>
    <string name="setup_customization_1">Customization</string>
    <string name="setup_customization_2">By default the debug menu uses the current Activity\'s theme, but this, together with the default English copies can be overridden by specifying an instance of <i>Appearance</i> when initializing the library. It\'s recommended to extend a <i>.NoActionBar</i> theme when doing so.\n\nSimilarly, adding a <i>Behavior</i> instance can be used to personalize the default configuration, for example fine-tune (or turn off) the shake to open feature or haptic feedback.</string>
    <string name="setup_customization_3">Check out the KDoc comments for these classes to see all the possible options.</string>
    <string name="setup_localization_1">Localization</string>
    <string name="setup_localization_2">Whenever the library asks for a string that appears on the UI, under the hood it expects an instance of the <i>Text</i> sealed class, which has two subtypes: <i>CharSequence</i> and <i>ResourceId</i>. This is true for providing localizations for the <i>Appearance</i> data class mentioned in the previous section, but also for all modules: even if there are secondary constructors that accept either a <i>CharSequence</i> or an <i>Int</i>, these will always be used to instantiate the proper subtype of <i>Text</i>.\n\nThe benefit of using resource ID integers is that the library will resolve them every time the Views are refreshed, which allows the possibility of translating the debug menu to different languages.</string>
    <string name="setup_troubleshooting_1">Troubleshooting</string>
    <string name="setup_troubleshooting_2">In case of the Drawer UI, if you have overwritten the Activity\'s <i>onBackPressed()</i> method, you might notice that the default back navigation handling does not always work as expected. To fix this, in every Activity\'s <i>onBackPressed()</i> you should check that <i>Beagle.hide()</i> returns false before doing any other checks or calling the super implementation:</string>
    <string name="setup_troubleshooting_3">If you find any undocumented problems, feel free to reach out and open an issue on GitHub - I\'ll be quick to respond.</string>
    <string name="setup_debug_menu_text_1"><b>This is the debug menu configured by you</b>\n\nIt should contain useful information, like the version number of your app, the build date, or information on the device it\'s running on.\n\nYou can use it to track network requests, show analytics events, display custom logs, session-related data, or anything that you consider useful for debugging potential issues or simplifying the testing process.\n\nIt can also contain various interactive features, such as switches, radio groups, buttons, sliders, etc. that you can use to set up a \"God mode\" during development.</string>
    <string name="setup_debug_menu_app_info_button">Show app info</string>
    <string name="setup_debug_menu_screenshot_button">Take a screenshot</string>
    <string name="setup_debug_menu_keyline_overlay_switch"><b>Draw keyline overlay</b></string>
    <string name="setup_debug_menu_radio_group"><b>Backend environment</b></string>
    <string name="setup_debug_menu_radio_group_option_1">Development</string>
    <string name="setup_debug_menu_radio_group_option_2">Staging</string>
    <string name="setup_debug_menu_radio_group_option_3">Production</string>
    <string name="setup_debug_menu_device_information"><b>Device information</b></string>
    <string name="setup_debug_menu_text_2">The contents of the debug menu can be changed at any time. For example, in this app you will see very different Beagle setups as you explore the different screens.</string>

    <!-- Examples -->
    <string name="examples_title">Examples</string>
    <string name="examples_text">The module configuration very much depends on your application\'s specific needs, so there is no single setup that will be ideal for every situation.\n\nThe following examples demonstrate some of the library\'s features while also describing how they are implemented. Use them as inspiration for coming up with your own debug menu!\n</string>
    <string name="examples_beagle_text_1">Select one of the case studies to see the specialized version of the debug menu for the situation.</string>
    <string name="examples_beagle_text_2">You can also navigate from here, why not?</string>

    <!-- Case studies / Simple setup -->
    <string name="case_study_simple_setup_title">Simple setup</string>
    <string name="case_study_simple_setup_description">Built-in modules that can be added with no configuration whatsoever and are useful for most projects.</string>
    <string name="case_study_simple_setup_text_1">Open the debug menu to check out its features. The current module configuration is initialized using the following code snippet:</string>
    <string name="case_study_simple_setup_initialization_2">All of these modules can be customized by specifying some optional parameters, but for this example the default values are used. Let\'s see what each individual module does:\n</string>
    <string name="case_study_simple_setup_app_info_button_1"><b>AppInfoButton</b></string>
    <string name="case_study_simple_setup_app_info_button_2">A shortcut to the system settings page of your app. Can be useful if you need quick access to clearing the storage, for example.\n\nThe optional <i>shouldOpenInNewTask</i> parameter can be used to specify the <i>FLAG_ACTIVITY_NEW_TASK</i> Intent flag for the new Activity.\n\nOne note that applies to the appearance of all Buttons covered in this section: there is an option to use regular list items instead, by changing the <i>type</i> parameter. The <i>icon</i> parameter is another customization option.</string>
    <string name="case_study_simple_setup_developer_options_button_1"><b>DeveloperOptionsButton</b></string>
    <string name="case_study_simple_setup_developer_options_button_2">A shortcut to the system\'s Developer Options page.\n\nThe optional <i>shouldOpenInNewTask</i> parameter can be used to specify the <i>FLAG_ACTIVITY_NEW_TASK</i> Intent flag for the new Activity.</string>
    <string name="case_study_simple_setup_force_crash_button_1"><b>ForceCrashButton</b></string>
    <string name="case_study_simple_setup_force_crash_button_2">This module can be used to easily test the application\'s crash reporting capabilities. By default Beagle handles uncaught exceptions and opens the bug reporting screen. To disable this feature, initialize the library the following way:</string>
    <string name="case_study_simple_setup_screenshot_button_1"><b>ScreenshotButton</b></string>
    <string name="case_study_simple_setup_screenshot_button_2">Create a screenshot image of the current screen and bring up the system\'s Share bottom sheet, when done.\n\nThe image will be saved in the app\'s private cache folder and exposed using a FileProvider to avoid asking for storage permission.\n\nBelow Android 5.0 the drawing cache of the root view will be used which is not ideal: system decorations or dialogs might not be visible. On Android 5.0 and above the MediaProjectionManager API is used which creates a proper screenshot, but requires the user to give their permission every time (due to privacy concerns).\n\nSome aspects of the screenshot flow can be customized using the <i>Appearance</i> and <i>Behavior</i> objects that were provided when initializing Beagle.</string>
    <string name="case_study_simple_setup_screen_recording_button_1"><b>ScreenRecordingButton</b></string>
    <string name="case_study_simple_setup_screen_recording_button_2">Create a video recording of the current screen and bring up the system\'s Share bottom sheet, when done.\n\nThe recording is handled by a foreground service and a system notification will be present for the entire duration of the recording. The capture can be stopped by tapping on that notification.\n\nThe video will be saved in the app\'s private cache folder and exposed using a FileProvider to avoid asking for storage permission.\n\nThe implementation relies on the MediaProjectionManager API which is only available on Android 5.0 and above, and requires the user to give their permission every time (due to privacy concerns).\n\nSome aspects of the screen recording flow can be customized using the <i>Appearance</i> and <i>Behavior</i> objects that were provided when initializing Beagle.</string>
    <string name="case_study_simple_setup_gallery_button_1"><b>GalleryButton</b></string>
    <string name="case_study_simple_setup_gallery_button_2">Displays a button that opens the gallery of captured screenshot images and screen recording videos. These files are stored in the private cache directory of the application so other file managers will not be able to see them.\n\nThe gallery offers options to share the files or delete them. Check out the <i>Appearance</i> class optionally provided when initializing Beagle for ways to customize the appearance of the screen.</string>
    <string name="case_study_simple_setup_screen_capture_toolbox_1"><b>ScreenCaptureToolbox</b></string>
    <string name="case_study_simple_setup_screen_capture_toolbox_2">The previously discussed Screenshot, ScreenRecording and Gallery buttons are somewhat connected conceptually but can take up a bit too much space when all three are added to the debug menu.\n\nThe <i>ScreenCaptureToolboxModule</i> is simply a different way to offer the functionality of these three modules: they will be displayed as parts of an expandable list. You can see how this looks on the Playground screen.</string>
    <string name="case_study_simple_setup_keyline_overlay_switch_1"><b>KeylineOverlaySwitchModule</b></string>
    <string name="case_study_simple_setup_keyline_overlay_switch_2">This switch can be very useful when trying to create pixel-perfect layouts. The color and dimensions of the overlay grid are configurable, but the default values follow the Material Design specifications for mobile and tablet.\n\nThe optional <i>applyInsets</i> lambda function can be used to override the default inset handling if it does not work properly with your setup.</string>
    <string name="case_study_simple_setup_animation_duration_switch_1"><b>AnimationDurationSwitch</b></string>
    <string name="case_study_simple_setup_animation_duration_switch_2">A frequent use case for this toggle is debugging animation or transition glitches. Check out how it affects this loading indicator:</string>
    <string name="case_study_simple_setup_lifecycle_log_list_1"><b>LifecycleLogList</b></string>
    <string name="case_study_simple_setup_lifecycle_log_list_2">Very useful tool for debugging lifecycle-related problems or simply getting to know a new project, as it logs the names of the classes responsible for the UI during navigation (Activities and Fragments).\n\nYou can use the <i>eventTypes</i> argument to only log method calls of some specific types, and the <i>shouldDisplayFullNames</i> argument to display the full package name of the Fragment / Activity classes.\n\nIn obfuscated builds the names of Fragment classes will not be displayed properly. To avoid this, consider adding the following line to your ProGuard configuration:</string>
    <string name="case_study_simple_setup_device_info_1"><b>DeviceInfo</b></string>
    <string name="case_study_simple_setup_device_info_2">Displays important information about the device such as the Android SDK version or the screen resolution that can be helpful in identifying device-specific issues. The entries on the list can be individually enabled or disabled in the module\'s constructor (by default everything is displayed).</string>
    <string name="case_study_simple_setup_bug_report_button_1"><b>BugReportButton</b></string>
    <string name="case_study_simple_setup_bug_report_button_2">This button calls the <i>Beagle.openBugReportingScreen()</i> function which links to a separate Activity where bug reports can be created. These reports can contain screenshots, logs, and custom content. For ways to personalize the experience, check out the <i>bugReportTexts</i> property of the <i>Appearance</i> class and the <i>bugReportingBehavior</i> property of the <i>Behavior</i> class.</string>

    <!-- Case studies / Static data -->
    <string name="case_study_static_data_title">Static data</string>
    <string name="case_study_static_data_description">Ways to display potentially useful information about the build, the environment or the session.</string>
    <string name="case_study_static_data_top_1">Here are all the modules used in this example:</string>
    <string name="case_study_static_data_top_2">Whenever Beagle requires a text that will be displayed on the UI, for localization, it will ask for a subclass of <i>Text</i>: a <i>Text.CharSequence</i> or an integer <i>Text.ResourceId</i>. To simplify this, most modules have constructors that accept either a <i>CharSequence</i> or an <i>Int</i> and do the mapping under the hood. Where this was not possible, you can use the <i>.toText()</i> extension function which is defined for <i>CharSequence</i> as well as for <i>Int</i>.\n\nAgain, let\'s discuss the modules individually, in detail.\n</string>
    <string name="case_study_static_data_header_1"><b>Header</b></string>
    <string name="case_study_static_data_header_2">This module applies a specific formatting to three (optional) pieces of text. The variables for the current configuration are defined the following way:</string>
    <string name="case_study_static_data_header_3">The last line uses a custom build config field:</string>
    <string name="case_study_static_data_header_4">A setup like this is usually a good candidate for the first item of the debug menu as it displays all the important metadata about the build at a glance.</string>
    <string name="case_study_static_data_text_1"><b>Text</b></string>
    <string name="case_study_static_data_text_2">The <i>TextModule</i> can be used to display normal texts, section headers, or buttons, by setting the <i>type</i> parameter (which defaults to normal: no special formatting). It also supports disabled state (through the <i>isEnabled</i> parameter), optional icons (<i>icon</i> parameter) and click handling (via <i>onItemSelected</i> - if this lambda function is null, the module is not clickable).\n\nPlease note that all modules that deal with text drawn on the UI expect <i>CharSequence</i> instead of <i>String</i>. As a result, while Strings are perfectly fine, Spannables can also be used to spice things up with special formatting.\n\nResource ID integers are also accepted for all modules, as they have the advantage of being translatable if needed.</string>
    <string name="case_study_static_data_long_text_1"><b>LongText</b></string>
    <string name="case_study_static_data_long_text_2">Similar to TextModule, but the main content (<i>text</i> parameter) can be collapsed into a header (<i>title</i> parameter), and no special formatting types are available in this case. The <i>isExpandedInitially</i> parameter can be used to specify whether or not the content should be expanded the first time the user opens the debug menu.</string>
    <string name="case_study_static_data_padding_1"><b>Padding</b></string>
    <string name="case_study_static_data_padding_2">Adds a configurable size of empty space to the debug menu (8dp by default). The maximum value supported by the <i>size</i> parameter is 16dp, but feel free to add multiple instances if more space is needed.</string>
    <string name="case_study_static_data_divider_1"><b>Divider</b></string>
    <string name="case_study_static_data_divider_2">A 1dp tall, horizontal line that uses the default text color of the theme.</string>
    <string name="case_study_static_data_key_value_list_1"><b>KeyValueList</b></string>
    <string name="case_study_static_data_key_value_list_2">Similar to LongTextModule in its expand-collapse behavior, but instead of a single text parameter for its main content, this module expects a list of CharSequence Pairs. The keys for each entry will automatically become bold.</string>
    <string name="case_study_static_data_loading_indicator_1"><b>LoadingIndicator</b></string>
    <string name="case_study_static_data_loading_indicator_2">Loading only take a single (optional) parameter: their <i>id</i>. However, it might be a good idea to use a known constant for it, instead of its default random value, so that you can call <i>Beagle.remove()</i> when the content that\'s being loaded becomes ready.</string>
    <string name="case_study_static_data_module_text_1">This <i>piece of text</i> <u><b>contains</b> parts</u> with <b><i>special</i></b> <i><u>formatting</u></i>.</string>
    <string name="case_study_static_data_module_text_2">This one has an icon!</string>
    <string name="case_study_static_data_module_section_header_1">Section headers can be used to separate content, but adding spaces…</string>
    <string name="case_study_static_data_module_text_3">…or dividers…</string>
    <string name="case_study_static_data_module_text_4">…can also be useful.</string>
    <string name="case_study_static_data_module_text_5">Longer content can be made expandable.</string>
    <string name="case_study_static_data_module_text_6">This helps reduce visual clutter and also acts as a way to organize the debug menu.</string>
    <string name="case_study_static_data_module_text_7">Buttons can be used for actions</string>
    <string name="case_study_static_data_module_text_8">Last but not least, you can display loading indicators as temporary placeholders for parts of the UI that are being loaded asynchronously:</string>
    <string name="case_study_static_data_module_key_value_title">Another way to display information is to group it into key-value pairs.</string>
    <string name="case_study_static_data_module_key_1">Key 1</string>
    <string name="case_study_static_data_module_value_1">Value 1</string>
    <string name="case_study_static_data_module_key_2">Key 2</string>
    <string name="case_study_static_data_module_value_2">Value 2</string>
    <string name="case_study_static_data_module_key_3">Key 3</string>
    <string name="case_study_static_data_module_value_3">Value 3</string>
    <string name="case_study_static_data_button_clicked">Button clicked</string>

    <!-- Case studies / Value wrappers -->
    <string name="case_study_value_wrappers_title">Value wrappers</string>
    <string name="case_study_value_wrappers_description">Test different implementations without creating new builds, and persist these settings across app launches with a single extra line of code.</string>
    <string name="case_study_value_wrappers_text_1">Enabling / disabling some toggles or changing some specific part of the configuration at runtime is one of the most important use cases for a debug menu. This example showcases all the ways Beagle can help you achieve this.\n\nObserve how the values in the card below are updated in real-time as you modify the flags in the debug menu:</string>
    <string name="case_study_value_wrappers_text_2">These modules have many similarities that will be discussed below, but one thing worth mentioning here is that they all expect a <i>title</i> / <i>text</i> parameter. The examples below use a static string provided either as a <i>CharSequence</i> or an <i>Int</i> resource ID, but lambda functions can also be used, giving the possibility to update the text in function of the current value.</string>
    <string name="case_study_value_wrappers_current_state_on">ON</string>
    <string name="case_study_value_wrappers_current_state_off">OFF</string>
    <string name="case_study_value_wrappers_current_state_key_1">"• Toggle 1: "</string>
    <string name="case_study_value_wrappers_current_state_key_2">"\n• Toggle 2: "</string>
    <string name="case_study_value_wrappers_current_state_key_3">"\n• Toggle 3: "</string>
    <string name="case_study_value_wrappers_current_state_key_4">"\n• Toggle 4: "</string>
    <string name="case_study_value_wrappers_current_state_key_5">"\n• Check box group: "</string>
    <string name="case_study_value_wrappers_current_state_key_6">"\n• Radio button group: "</string>
    <string name="case_study_value_wrappers_current_state_key_7">"\n• Slider: "</string>
    <string name="case_study_value_wrappers_current_state_key_8">"\n• Text input: "</string>
    <string name="case_study_value_wrappers_switch"><b>Switch</b></string>
    <string name="case_study_value_wrappers_switch_description_1">The simplest way to initialize a Switch module is providing a text parameter together with a callback lambda, which will be invoked with the Boolean argument of the new state every time the user toggles the switch:</string>
    <string name="case_study_value_wrappers_switch_description_2">Initially the switch will be off, but this can be changed by overriding the default value of the <i>initialValue</i> parameter.</string>
    <string name="case_study_value_wrappers_check_box"><b>CheckBox</b></string>
    <string name="case_study_value_wrappers_check_box_description">Check boxes can be initialized in a very similar way to switches and they support the same functionality. The only difference is the name of the module:</string>
    <string name="case_study_value_wrappers_multiple_selection_list"><b>MultipleSelectionList</b></string>
    <string name="case_study_value_wrappers_multiple_selection_list_description_1">For items that are grouped together into a list we should create a model class representation for list items that implements the <i>BeagleListItemContract</i> interface:</string>
    <string name="case_study_value_wrappers_multiple_selection_list_description_2">After this we can define the module by specifying a list of items as well as a title for the list, the set of the initial selection ID-s and the callback (which will be invoked with the set of currently selected items as its argument).</string>
    <string name="case_study_value_wrappers_single_selection_list"><b>SingleSelectionList</b></string>
    <string name="case_study_value_wrappers_single_selection_list_description_1">In case of radio buttons, the important difference compared to the previous example is that at most a single item can be selected at any given time. As a result, there is no need to deal with sets any more:</string>
    <string name="case_study_value_wrappers_single_selection_list_description_2">The module supports not having an initial selection, so both the <i>initiallySelectedItemId</i> parameter and the argument of the <i>onSelectionChanged</i> lambda are nullable.\n\nWhen testing on multiple backend environments, a SingleSelectionListModule is the ideal choice for changing the base URL of the server the app is connecting to.</string>
    <string name="case_study_value_wrappers_slider"><b>Slider</b></string>
    <string name="case_study_value_wrappers_slider_description_1">Adjusting the value of an integer within a specified range can be done using the SliderModule:</string>
    <string name="case_study_value_wrappers_slider_description_2">One interesting aspect to note here is that the <i>text</i> displayed on top of the seek bar is defined as a lambda that receives the current value (after every change event). As mentioned before, this can be implemented for any of the modules covered in this section.\n\nThe optional parameters to configure the behavior of the slider are <i>minimumValue</i>, <i>maximumValue</i> and <i>initialValue</i> (the latter defaults to <i>minimumValue</i>, if not specified).</string>
    <string name="case_study_value_wrappers_text_input"><b>TextInput</b></string>
    <string name="case_study_value_wrappers_text_input_description_1">Somewhat similar in API to Slider but this module deals with a String value instead of an Int.</string>
    <string name="case_study_value_wrappers_text_input_description_2">The item itself is just a clickable text, that brings up a dialog which contains the actual text input. The <i>areRealTimeUpdatesEnabled</i> parameter controls whether or not the value should be updated after every keystroke (and as a result, the callback will be invoked on every change event), or only after the user presses the Done button. The <i>validator</i> lambda exposes the option to reject certain values, while <i>doneText</i> and <i>cancelText</i> can be used to customize the appearance of the dialog.</string>
    <string name="case_study_value_wrappers_querying_and_changing_the_current_value"><b>Querying and changing the current value</b></string>
    <string name="case_study_value_wrappers_querying_and_changing_the_current_value_description_1">In case using the callbacks for the modules above is not enough, the current state can be queried at any time using this (somewhat cumbersome) function:</string>
    <string name="case_study_value_wrappers_querying_and_changing_the_current_value_description_2">A similar setter also exists to modify the state programmatically.</string>
    <string name="case_study_value_wrappers_querying_and_changing_the_current_value_description_3">Any changes made this way will also update the UI. Give it a try with this button:</string>
    <string name="case_study_value_wrappers_querying_and_changing_the_current_value_description_4">To use any of these methods, a reference to the module is needed. The simplest way to get that is saving it at the moment of instantiation, but if that is not convenient for some reason, the library\'s <i>find()</i> function can also be used.</string>
    <string name="case_study_value_wrappers_querying_and_changing_the_current_value_description_5">Please note that this will return null if the module is not currently added to the debug menu, but it will throw a <i>ClassCastException</i> if the module was found with a different type, than expected.</string>
    <string name="case_study_value_wrappers_reset_all">Reset all</string>
    <string name="case_study_value_wrappers_state_reset">All values were reset</string>
    <string name="case_study_value_wrappers_persisting_state"><b>Persisting state</b></string>
    <string name="case_study_value_wrappers_persisting_state_description">All of the modules discussed in this example have the optional <i>isValuePersisted</i> constructor parameter, which is set to false by default. Setting it to true AND providing a unique module ID (the auto-generated random value is inconsistent between app launches) will automatically save and restore the state of the module to / from <i>SharedPreferences</i>.\n\nIf the value is persisted, the <i>initialValue</i> / <i>initiallySelectedItemIds</i> / <i>initiallySelectedItemId</i> parameters are only taken into consideration when there is no data saved on the local storage.\n\nLastly, the callbacks of persisted modules are invoked when the module is added to the debug menu so that any custom logic that happens on manual selection could also be executed when the state is restored.\n\nThe current demo configuration saves and restores all the modules on this screen.</string>
    <string name="case_study_value_wrappers_disabling_interactions">Disabling interactions</string>
    <string name="case_study_value_wrappers_disabling_interactions_description_1">All of the modules discussed in this example have the optional <i>isEnabled</i> constructor parameter, which is set to true by default. Setting it to false disables all UI interactions with the module.\n\nUse the switch below to enable or disable interactions for all modules.</string>
    <string name="case_study_value_wrappers_disabling_interactions_switch"><i>Enable interactions for all modules</i></string>
    <string name="case_study_value_wrappers_disabling_interactions_description_2">Changing the values of these modules programmatically is still possible in disabled state as only the UI interactions are blocked.</string>
    <string name="case_study_value_wrappers_bulk_apply"><b>Bulk apply</b></string>
    <string name="case_study_value_wrappers_bulk_apply_description_1_off">Right now all manual changes made to the modules are applied instantaneously. You can change that:</string>
    <string name="case_study_value_wrappers_bulk_apply_description_1_on">Right now all manual changes made to the modules are only applied after a confirmation. You can change that:</string>
    <string name="case_study_value_wrappers_require_confirmation"><i>Require confirmation for all modules</i></string>
    <string name="case_study_value_wrappers_bulk_apply_description_2">By setting the <i>shouldRequireConfirmation</i> parameter to true for any of the modules presented in this example, users will be given the option to Apply or Reset the changes they made. This means that the library will accumulate pending change events and invoke the necessary callbacks in bulk when the user presses the Apply button.\n\nModifying the values from code will still have instantaneous effect. The texts that appear on the Apply and Reset buttons can be changed in the optional <i>Appearance</i> object provided while initializing Beagle.</string>
    <string name="case_study_value_wrappers_hint_1"><i>For simple on-off flags two UI representations are available:</i></string>
    <string name="case_study_value_wrappers_switches">Switches</string>
    <string name="case_study_value_wrappers_toggle_1">Toggle 1</string>
    <string name="case_study_value_wrappers_toggle_2">Toggle 2</string>
    <string name="case_study_value_wrappers_check_boxes">Check boxes</string>
    <string name="case_study_value_wrappers_toggle_3">Toggle 3</string>
    <string name="case_study_value_wrappers_toggle_4">Toggle 4</string>
    <string name="case_study_value_wrappers_hint_2"><i>Check boxes can also be grouped together, in this case a single callback is invoked every time the selection changes:</i></string>
    <string name="case_study_value_wrappers_check_box_group"><b>Check box group</b></string>
    <string name="case_study_value_wrappers_check_box_1">Option 1</string>
    <string name="case_study_value_wrappers_check_box_2">Option 2</string>
    <string name="case_study_value_wrappers_check_box_3">Option 3</string>
    <string name="case_study_value_wrappers_hint_3"><i>In case only a single selection is considered valid at any time, radio buttons should be used:</i></string>
    <string name="case_study_value_wrappers_radio_button_group"><b>Radio button group</b></string>
    <string name="case_study_value_wrappers_radio_button_1">Option 1</string>
    <string name="case_study_value_wrappers_radio_button_2">Option 2</string>
    <string name="case_study_value_wrappers_radio_button_3">Option 3</string>
    <string name="case_study_value_wrappers_hint_4"><i>For adjusting numeric values, using a slider is the simplest solution:</i></string>
    <string name="case_study_value_wrappers_slider_label">Slider</string>
    <string name="case_study_value_wrappers_slider_title">Current value: %d</string>
    <string name="case_study_value_wrappers_hint_5"><i>Last but not least, the library is also capable of handling text input:</i></string>
    <string name="case_study_value_wrappers_text_input_label">Text input</string>
    <string name="case_study_value_wrappers_text_input_title">Current value: %s (tap on this item to change it)</string>

    <!-- Case studies / Network request interceptor -->
    <string name="case_study_network_request_interceptor_title">Intercepting network requests</string>
    <string name="case_study_network_request_interceptor_description">See the incoming and outgoing REST API calls and their formatted JSON payload to quickly debug potential issues.</string>
    <string name="case_study_network_request_interceptor_network_activity"><b>Network activity</b></string>
    <string name="case_study_network_request_interceptor_text_1">This section calls different Dummy JSON endpoints each time you change the selection.\n\nObserve how the debug menu tracks every outgoing and incoming network request. You can also tap on the individual entries to see the formatted JSON payload, where you can use a search feature.\n\nTry selecting a different endpoint to trigger a new network request:\n</string>
    <string name="case_study_network_request_interceptor_loading">Loading…</string>
    <string name="case_study_network_request_interceptor_something_went_wrong">Something went wrong.</string>
    <string name="case_study_network_request_interceptor_try_again">Try again</string>
    <string name="case_study_network_request_interceptor_endpoint_1">Get all users</string>
    <string name="case_study_network_request_interceptor_endpoint_2">Search for "Alison"</string>
    <string name="case_study_network_request_interceptor_text_3">\nThe module itself can be instantiated using a single line of code:</string>
    <string name="case_study_network_request_interceptor_text_4">…and can be populated with data manually, using <i>Beagle.logNetworkEvent()</i>. However, the recommended approach is using a special <i>Interceptor</i> registered on the <i>OkHttpClient</i>, which comes in a separate artifact from the main library so that you can use it in pure Kotlin / Java modules.\n\nAdd the following to the module where your networking logic is implemented:</string>
    <string name="case_study_network_request_interceptor_text_5">This will introduce the <i>BeagleOkHttpLogger</i> object which first needs to be connected to the main library, the moment it gets initialized:</string>
    <string name="case_study_network_request_interceptor_text_6">The last step is setting up the Interceptor (the awkward casting is there to make sure the noop implementation does nothing while still having the same public API):</string>
    <string name="case_study_network_request_interceptor_text_7"><b>Notes</b>\n\nYou can use <i>Beagle.clearNetworkLogEntries()</i> (or <i>BeagleOkHttpLogger.clearNetworkLogEntries()</i> in other modules) to remove all elements from the list. Test it using this button:</string>
    <string name="case_study_network_request_interceptor_clear_logs">Clear logs</string>
    <string name="case_study_network_request_interceptor_logs_cleared">Logs cleared</string>
    <string name="case_study_network_request_interceptor_text_8">\nSpecifying a getter for the <i>baseUrl</i> in the <i>Behavior.NetworkLogBehavior</i> class is a good idea in most cases to avoid having the same URL prefix for every single entry.\n\nAs usual, the optional arguments of the module constructor can be used to fine-tune its behavior:\n  • <i>maxItemCount</i> limits the total number of entries displayed in the list (and defaults to 10, when not specified).\n  • The <i>timestampFormatter</i> lambda can be used to override the way the timestamps of the events are displayed (or set to null to remove displaying timestamps altogether).\n\nThe library also provides a way to listen to any updates made to the list of network log events through the <i>NetworkLogListener</i> interface which can be used with the <i>Beagle.addNetworkLogListener()</i>, <i>Beagle.removeNetworkLogListener()</i>, and <i>Beagle.clearNetworkLogListeners()</i> functions.</string>

    <!-- Case studies / Analytics -->
    <string name="case_study_analytics_title">Logging</string>
    <string name="case_study_analytics_description">This example use case for logs is about analytics. Making sure that every required event is tracked from an admin panel can be cumbersome. Why not display the events right in the app, in real time?</string>
    <string name="case_study_analytics_module_title">Analytics events</string>
    <string name="case_study_analytics_text_1">Check out how any state change made to the following four check boxes is tracked by the debug menu:\n</string>
    <string name="case_study_analytics_toggle_1">Toggle 1</string>
    <string name="case_study_analytics_toggle_2">Toggle 2</string>
    <string name="case_study_analytics_toggle_3">Toggle 3</string>
    <string name="case_study_analytics_toggle_4">Toggle 4</string>
    <string name="case_study_analytics_text_2">This was achieved using Beagle\'s logging capabilities (and logging analytics events is of course just a small subset of the potential use cases for the feature). A single log() function is invoked every time a change is made:</string>
    <string name="case_study_analytics_text_3">The <i>label</i> parameter is optional, and is there to help with filtering, as multiple instances of LogListModule can be present at any time in the menu, each distinguished by the label they are set up to track. If no label is provided for the module, it will display all log messages.</string>
    <string name="case_study_analytics_text_4">All of the parameters from the constructor above are optional and have reasonable default values.\n\nThe list of log entries can be cleared any time using:</string>
    <string name="case_study_analytics_text_5">Again, not providing a label would signal the intention of clearing all messages, regardless of label. See it in action:</string>
    <string name="case_study_analytics_text_6">\nThe <i>Beagle.log()</i> function also has an optional <i>payload</i> parameter: this is meant for additional details that are displayed when tapping on the entry.\n\nThe <i>isPersisted</i> parameter can be set to true if the log needs to be saved to the local storage - otherwise it will only remain in memory as long as the application is not killed.\n\nLast bug not least, it is worth pointing out that, similarly to the NetworkLogListModule, we have the option to override the default timestamp formatting using the <i>timestampFormatter</i> parameter, and listen to changes with the <i>LogListener</i> interface (used with the <i>Beagle.addLogListener()</i>, <i>Beagle.removeLogListener()</i>, and <i>Beagle.clearLogListeners()</i> functions).\n\n<b>Logging from pure Java / Kotlin modules</b>\n\nTo access the same functionality that <i>Beagle.log()</i> provides from a pure Kotlin / Java module, first you need to add the following to the module in question:</string>
    <string name="case_study_analytics_text_7">This artifact provides the <i>BeagleLogger</i> object which needs to be connected to the main library when it is initialized in the <i>Application</i> class:</string>
    <string name="case_study_analytics_text_8">To add log messages, now you can call <i>BeagleLogger.log()</i>. The messages list will be merged with the ones logged using the regular <i>Beagle.log()</i> function (unless they are filtered by their tags).\n\nYou can also use <i>BeagleLogger.clearLogEntries()</i> if you cannot access <i>Beagle.clearLogEntries()</i>.</string>
    <string name="case_study_analytics_clear_logs">Clear logs</string>
    <string name="case_study_analytics_logs_cleared">Logs cleared</string>

    <!-- Case studies / Authentication -->
    <string name="case_study_authentication_title">Authentication</string>
    <string name="case_study_authentication_description">Simplify the QA process by presenting a list of test accounts and automatically filling in the necessary login information.</string>
    <string name="case_study_authentication_text_1">Manually typing in the same credentials multiple times a day can be a huge waste of time.</string>
    <string name="case_study_authentication_email">Email address</string>
    <string name="case_study_authentication_password">Password</string>
    <string name="case_study_authentication_sign_in_button">Sign in</string>
    <string name="case_study_authentication_signing_in">Signing in!</string>
    <string name="case_study_authentication_text_2">To define a module that helps in this situation, first we need to create a representation of a test account:</string>
    <string name="case_study_authentication_text_3">Extending <i>BeagleListItemContract</i> is a must as it provides information to the library about a unique identifier for the model (in this case the email address is good enough), and the actual text that is displayed on the UI.\n\nThe next step is creating the module:</string>
    <string name="case_study_authentication_text_4">To simplify the flow further, in the callback lambda we\'re hiding the debug menu and simulating the button press to proceed with the sign in flow.\n\nAnother idea to save time is to automatically display the debug menu when the screen is opened, simply by calling:</string>
    <string name="case_study_authentication_text_5">You can test this implementation by toggling the \"Show automatically\" switch and re-opening this screen.</string>
    <string name="case_study_authentication_test_accounts"><b>Test accounts</b></string>
    <string name="case_study_authentication_show_automatically_switch"><b>Show automatically</b></string>

    <!-- Case studies / Mock data generator -->
    <string name="case_study_mock_data_generator_title">Mock data generator</string>
    <string name="case_study_mock_data_generator_description">Filling your development database with random content makes your app look bad. Why not add a simple Lorem Ipsum generator instead?</string>
    <string name="case_study_mock_data_generator_minimum_word_count">Minimum word count: %d</string>
    <string name="case_study_mock_data_generator_maximum_word_count">Maximum word count: %d</string>
    <string name="case_study_mock_data_generator_start_with_lorem_ipsum">Start with "Lorem ipsum"</string>
    <string name="case_study_mock_data_generator_generate_sentence">Generate sentence</string>
    <string name="case_study_mock_data_generator_generate_text">Generate text</string>
    <string name="case_study_mock_data_generator_text_1">Beagle can be used to generate random pieces of text that, from a distance, look like real text. This minor detail can make the internal builds of your app much more pleasant to test as the user-generated content will somewhat resemble the one on the live environment, and you can see the design the way it was meant to be seen.</string>
    <string name="case_study_mock_data_generator_default_hint">Generate Lorem Ipsum using the debug menu</string>
    <string name="case_study_mock_data_generator_text_2">\nThe <i>LoremIpsumGeneratorButtonModule</i> simply adds a button to the debug menu. While the only mandatory constructor parameter is the <i>onLoremIpsumReady</i> lambda, you have multiple options to customize the way the text is generated:</string>
    <string name="case_study_mock_data_generator_text_3">In the case of this implementation, all the important parameters can be adjusted from the debug menu.</string>

    <!-- Case studies / Overlay -->
    <string name="case_study_overlay_title">Drawing over the app</string>
    <string name="case_study_overlay_description">The library exposes a canvas that can be used to draw any piece of important information over the main contents of your app.</string>
    <string name="case_study_overlay_hint">Enable the switch below to draw a translucent circle over the app\'s layout (only on this screen).</string>
    <string name="case_study_overlay_enable">Draw circle</string>
    <string name="case_study_overlay_text_1">Beagle exposes the <i>OverlayListener</i> interface that can be used to draw anything on a canvas above the app\'s layout.</string>
    <string name="case_study_overlay_text_2">As you can see, the callback also contains information about the root system window insets, these numbers will be 0 on unsupported SDK levels.\n\nTo avoid memory leaks as well as the cumbersome business of manually removing the listener, this implementation is tied to the current Fragment\'s View lifecycle (which means that closing the screen automatically removes the listener).\n\nAny pending changes to this overlay will only take effect after invalidating the current canvas. This can be done using:</string>
    <string name="case_study_overlay_text_3">Multiple <i>OverlayListener</i> implementations can draw on the canvas: invalidating basically invokes all registered listeners in order.\n\nA more useful example of overlay listeners is implemented in the built-in <i>KeylineOverlaySwitch</i> module.</string>

    <!-- Case studies / Navigation -->
    <string name="case_study_navigation_title">Navigating within the menu</string>
    <string name="case_study_navigation_description">Create submenus to better organize the modules.</string>
    <string name="case_study_navigation_text_1">The debug menu is basically a list of modules that is distinct by the module ID. This means that whenever a new module is added with an ID that already exists in the list, it will either get replaced or, if their contents are the same, no animations will be performed.\n\nThis example simply takes advantage of this fact to create three submenus, by updating parts of the list while leaving the header intact.</string>
    <string name="case_study_navigation_header_title">Debug menu</string>
    <string name="case_study_navigation_header_subtitle">Navigation example</string>
    <string name="case_study_navigation_header_text">You can navigate within this debug menu!</string>
    <string name="case_study_navigation_header_section_1">Section 1</string>
    <string name="case_study_navigation_header_section_1_detail">Welcome to Section 1!</string>
    <string name="case_study_navigation_header_section_2">Section 2</string>
    <string name="case_study_navigation_header_section_2_detail">Welcome to Section 2!</string>
    <string name="case_study_navigation_header_section_3">Section 3</string>
    <string name="case_study_navigation_header_section_3_detail">Welcome to Section 3!</string>
    <string name="case_study_navigation_close_section">Close section</string>

    <!-- Case studies / Crash logging -->
    <string name="case_study_crash_logging_title">Logging crashes</string>
    <string name="case_study_crash_logging_description">If your application crashes, Beagle can display a dialog with the stacktrace and open the Bug Report screen.</string>
    <string name="case_study_crash_logging_hint_1">Press the button below to trigger a crash. The crash logger should kick in to open a dialog with the stacktrace on top of the Bug report screen.</string>
    <string name="case_study_crash_logging_hint_2">The logs are persisted on the device storage so opening the Bug report screen at any point should show all the crash logs from the past. Press the button below to check it out.</string>
    <string name="case_study_crash_logging_text_1">Open the debug menu to test Beagle\'s exception handler.\n\nThis feature is not bundled with the main library; it needs a separate dependency to work:</string>
    <string name="case_study_crash_logging_text_2">After the dependencies are added, the newly introduced <i>BeagleCrashLogger</i> object should be connected to the main library:</string>
    <string name="case_study_crash_logging_text_3">Please note that enabling this feature will disable the crash collection of Firebase Crashlytics, as using the two simultaneously has proved to be unreliable.</string>

    <!-- Playground -->
    <string name="playground_title">Playground</string>
    <string name="playground_description">Use this interactive tool to quickly preview any module configuration and generate the code that can be used to create it. The debug menu will be updated automatically, in real time.\n\n• Drag the items vertically to rearrange them\n•     Swipe the items horizontally to remove them\n• Press the last button to add new items\n</string>
    <string name="playground_add_module">Add a new module</string>
    <string name="playground_generate_code">The current configuration could be created with something like this:</string>

    <!-- Add module -->
    <string name="add_module_title">Add new module</string>
    <string name="add_module_generic_modules"><b>Generic modules</b>\nAny number of instances can be added</string>
    <string name="add_module_check_box">CheckBox</string>
    <string name="add_module_check_box_description">Displays a simple check box.</string>
    <string name="add_module_divider">Divider</string>
    <string name="add_module_divider_description">Displays a simple horizontal line.</string>
    <string name="add_module_item_list">ItemList</string>
    <string name="add_module_item_list_description">Displays a list of simple items represented by [BeagleListItemContract].</string>
    <string name="add_module_key_value_list">KeyValueList</string>
    <string name="add_module_key_value_list_description">Displays a list of key-value pairs that can be collapsed into a header.</string>
    <string name="add_module_lifecycle_log_list">LifecycleLogList</string>
    <string name="add_module_lifecycle_log_list_description">Logs Fragment and Activity lifecycle events. Useful for getting to know the navigational classes on a new project or debugging lifecycle / state restoration issues.</string>
    <string name="add_module_loading_indicator">LoadingIndicator</string>
    <string name="add_module_loading_indicator_description">Displays circular progress bar.</string>
    <string name="add_module_log_list">LogList</string>
    <string name="add_module_log_list_description">Displays an expandable list of log messages. An example use case could be logging analytics events.</string>
    <string name="add_module_long_text">LongText</string>
    <string name="add_module_long_text_description">Displays a longer piece of text that can be collapsed into a title.</string>
    <string name="add_module_lorem_ipsum_generator_button">LoremIpsumGeneratorButton</string>
    <string name="add_module_lorem_ipsum_generator_button_description">Displays a button that generates a random text and returns it in a callback lambda.</string>
    <string name="add_module_multiple_selection_list">MultipleSelectionList</string>
    <string name="add_module_multiple_selection_list_description">Displays a list of check boxes represented by [BeagleListItemContract] instances. Any number of items can be selected at any given time.</string>
    <string name="add_module_padding">Padding</string>
    <string name="add_module_padding_description">Adds empty space between two other modules</string>
    <string name="add_module_single_selection_list">SingleSelectionList</string>
    <string name="add_module_single_selection_list_description">Displays a list of radio buttons represented by [BeagleListItemContract] instances. Only one item is selected at any given time.</string>
    <string name="add_module_slider">Slider</string>
    <string name="add_module_slider_description">Allows the user to adjust a numeric value.</string>
    <string name="add_module_switch">Switch</string>
    <string name="add_module_switch_description">Displays a simple switch.</string>
    <string name="add_module_text">Text (normal)</string>
    <string name="add_module_text_description">Displays a piece of text. Can be used for click handling as well.</string>
    <string name="add_module_text_section_header">Text (section header)</string>
    <string name="add_module_text_section_header_description">Displays a section header label.</string>
    <string name="add_module_text_button">Text (button)</string>
    <string name="add_module_text_button_description">Displays a simple button.</string>
    <string name="add_module_text_input">TextInput</string>
    <string name="add_module_text_input_description">Allows the user to enter a text value.</string>
    <string name="add_module_unique_modules"><b>Unique modules</b>\nOnly a single instance can be added</string>
    <string name="add_module_animation_duration_switch">AnimationDurationSwitch</string>
    <string name="add_module_animation_duration_switch_description">Displays a switch that, when enabled, increases the duration of animations.</string>
    <string name="add_module_app_info_button">AppInfoButton</string>
    <string name="add_module_app_info_button_description">Displays a button that links to the system settings\' Developer Options page.</string>
    <string name="add_module_bug_report_button">BugReportButton</string>
    <string name="add_module_bug_report_button_description">Displays a button that opens the bug reporting screen.</string>
    <string name="add_module_developer_options_button">DeveloperOptionsButton</string>
    <string name="add_module_developer_options_button_description">Displays a button that links to the Android App Info page for your app.</string>
    <string name="add_module_device_info">DeviceInfo</string>
    <string name="add_module_device_info_description">Displays information about the current device and the OS.</string>
    <string name="add_module_force_crash_button">ForceCrashButton</string>
    <string name="add_module_force_crash_button_description">Displays a button that throws an exception when pressed - useful for testing crash reporting.</string>
    <string name="add_module_gallery_button">GalleryButton</string>
    <string name="add_module_gallery_button_description">Displays a button that opens the gallery of captured screenshot images and screen recording videos.</string>
    <string name="add_module_header">Header</string>
    <string name="add_module_header_description">Displays a configurable title, subtitle and text.</string>
    <string name="add_module_keyline_overlay_switch">KeylineOverlaySwitch</string>
    <string name="add_module_keyline_overlay_switch_description">Displays a switch that, when enabled, draws a grid over your app with configurable dimensions that you can use to check the alignments of your Views.</string>
    <string name="add_module_network_log_list">NetworkLogList</string>
    <string name="add_module_network_log_list_description">Displays an expandable list of historical network activity. The entries are clickable to inspect their JSON payloads.</string>
    <string name="add_module_network_screen_capture_toolbox">ScreenCaptureToolbox</string>
    <string name="add_module_network_screen_capture_toolbox_description">Functionality-wise this module adds a ScreenshotButtonModule, a ScreenRecordingButtonModule and a GalleryButtonModule to the debug menu. However, they will be displayed as list items.</string>
    <string name="add_module_network_screen_recording_button">ScreenRecordingButton</string>
    <string name="add_module_network_screen_recording_button_description">Displays a button that takes a screen recording video of the current layout and allows the user to share it.</string>
    <string name="add_module_network_screenshot_button">ScreenshotButton</string>
    <string name="add_module_network_screenshot_button_description">Displays a button that takes a screenshot image of the current layout and allows the user to share it.</string>

    <!-- About -->
    <string name="about_title">About</string>
    <string name="about_description">Beagle is developed by me, Pandula Péter. Thanks for taking the time to check it out - I hope you\'ll find it useful in your projects. If you have any issues, questions or ideas, don\'t hesitate to contact me!\n</string>
    <string name="about_version_text">This build depends on version %s of the Beagle library.</string>
    <string name="about_github"><b>GitHub repository</b>\nCheck out the source code</string>
    <string name="about_article"><b>Feature list article</b>\nSee what can be solved with Beagle</string>
    <string name="about_google_play"><b>Play Store listing</b>\nRate the app on Google Play</string>
    <string name="about_share"><b>Share</b>\nSpread the word about Beagle</string>
    <string name="about_share_text">Check out Beagle, a free and open-source Android library that adds a highly customizable debug menu to the internal builds of your apps: %s</string>
    <string name="about_contact"><b>Contact me</b>\nDrop me a line about any questions or problems</string>
    <string name="about_open_source"><b>Open source licences</b>\nLegal information regarding dependencies</string>

    <!-- Licences -->
    <string name="licences_title">Licences</string>
    <string name="licences_description"><b>1. Definitions.</b>\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n<b>2. Grant of Copyright License.</b>\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n<b>3. Grant of Patent License.</b>\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n<b>4. Redistribution.</b>\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n• You must give any other recipients of the Work or Derivative Works a copy of this License; and\n• You must cause any modified files to carry prominent notices stating that You changed the files; and\n• You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n• If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n<b>5. Submission of Contributions.</b>\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n<b>6. Trademarks.</b>\n\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n<b>7. Disclaimer of Warranty.</b>\n\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n<b>8. Limitation of Liability.</b>\n\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n<b>9. Accepting Warranty or Additional Liability.</b>\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</string>
    <string name="licences_apache">\n<b>Apache License, v2.0</b></string>
</resources>